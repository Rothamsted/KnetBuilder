PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bk: <http://www.ondex.org/bioknet/terms/>
PREFIX bkr: <http://www.ondex.org/bioknet/resources/>
PREFIX bka: <http://www.ondex.org/bioknet/attributes/>
PREFIX dc: <http://purl.org/dc/elements/1.1/>

SELECT ?iri ?type ?fromIri ?toIri
{
  # BEWARE that the following is optimised, it might become significantly slower if you change order/structure
  # 
  { 
    # Use a subquery to get them once for all
    { select distinct ?type { ?type rdfs:subPropertyOf* bk:conceptsRelation } }
  		?fromIri ?type ?toIri.
    
    # This is taken care of by the reified relation queries (reified relations always have a direct statement too)
    # For optimisation purposes, this filter goes here only, the next UNION branch doesn't yield reified relations.
    FILTER NOT EXISTS {
      ?reifiedIri bk:relFrom ?fromIri; bk:relTo ?toIri; bk:relTypeRef ?type.
    }
  } 
  UNION
  {
    VALUES ( ?type ) {
      ( dc:identifier )
      ( bk:dataSource )
      ( bk:evidence )
      ( bk:relatedConcept )
    }
	  	?fromIri ?type ?toIri.
	  	?fromIri a/rdfs:subClassOf* bk:Concept.
  }
    
  # IRI is used in Cypher to assign an ID to each relation		
  BIND ( 
    IRI ( 
      CONCAT ( 
        STR ( bkr: ),
        MD5 ( CONCAT ( STR ( ?type ), STR ( ?fromIri ), STR ( ?toIri ) ) )
      ) 
    )
    AS ?iri
  )   
}
LIMIT 1000