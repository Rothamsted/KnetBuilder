<#-- 

	Returns an array out of the parameter, putting it into an array if it's a singleton 

-->
<#function to_seq object>
  <#return (object?is_string || !object?is_enumerable)?then ( [ object ], object )>
</#function>
<#-- 

  All instances of a given class mentioned in a JSON-LD object
  
-->
<#function jsld_instances json_ld classId>
	<#local result = {}>
	<#list json_ld as js_obj>
		<#if !to_seq ( js_obj [ '@type' ] )?seq_contains ( classId )><#continue /></#if>
		<#local result += { js_obj [ '@id' ]: js_obj }>
	</#list>
	<#return result />
</#function>
<#-- 
	
  Builds an index out of an object sequence
  TODO: never used!
-->
<#function seq_index seq key_prop>
	<#local result = {}>
	<#list seq as item>
		<#local result += { result [ key_prop ]: item }>
	</#list>
</#function>
<#-- 
  
  Often used for main properties of metadata entities (eg, concept classes, evidence 

-->
<#macro render_metadata m>
				<id>${m.identifier}</id>
			<#noautoesc>
				<fullname><![CDATA[${(m.label[ '@value' ])!''}]]></fullname>
				<description><![CDATA[${(m.description[ '@value' ])!''}]]></description>
			</#noautoesc>
</#macro>
<#-- 

	Renders common stuff about concepts and relations 

-->
<#macro render_related_concepts e>
	<#if !e.relatedConcept??><#return /></#if>
					<contexts>
						<#list to_seq ( e.relatedConcept ) as related_concept_iri>
							<context><id>${conceptIds [ NamespaceUtils.iri ( related_concept_iri ) ]}</id></context>
						</#list>
					</contexts>
</#macro>
<#macro render_evidences e>
	<#if !e.evidence??><#return /></#if>
		<#if !evidence_types??>
			<#global evidence_types = JsonUtils.indexJsonLdTypes ( js, "EvidenceType" ) />
		</#if>
						<evidences>
							<#list to_seq ( e.evidence ) as evidence_iri>
								<evidence>
									<@render_metadata evidence_types [ evidence_iri ] />
								</evidence>
							</#list>
						</evidences>
</#macro>
<#macro render_data_source e>
	<#if !e.dataSource??><#return /></#if>
		<#if !data_sources??>
			<#global data_sources = JsonUtils.indexJsonLdTypes ( js, "DataSource" ) />
		</#if>
						<elementOf>
							<@render_metadata data_sources [ e.dataSource ] />
						</elementOf>
</#macro>
<#macro render_attribute_values e group_xml_tag entry_xml_tag>
	<#if !e._attribute??><#return /></#if>
		<#if !attribute_values??>
			<#global attribute_values = JsonUtils.indexJsonLdTypes ( js, "_AttributeValue" ) />
		</#if>
		<#--  
		
			We must group multi-value attributes too, this way:
			attr._attribType => [ { xsd: attrib._attribXsd, lexValue: attrib._attribLexValue } ]
			
			from an object like:
				rdf:type bk:_AttributeValue;
		    bk:_attribType ?attribId;
				bk:_attribLexValue ?attribLexValue;
		    bk:_attribXsd ?attribXsd;
		    bk:attribIsIndexed ?isAttribIndexed					
		-->
		<#local grouped_values = {}>
		<#list to_seq ( e._attribute ) as attr_iri>
		  <#local attr = attribute_values [ attr_iri ] /> 
		  <#local entry = (grouped_values [ attr._attribType ])![] />
		  <#local entry += [{ 
		  	'xsd': attr._attribXsd, 'lex_value': attr._attribLexValue, 
		  	'is_indexed': (attr.attribIsIndexed)!false,
		  	'java_class': (attr.ondexRange)!'' 
		  }]/>
		  <#local grouped_values += { attr._attribType: entry } />
		</#list>
		<#-- 
		
			OK, ready for rendering now
			
		-->
		<${group_xml_tag}>
			<#list grouped_values as attr_type, attr_entries>
				<${entry_xml_tag}>
					<attrname>
						<idRef>${attr_type}</idRef>
					</attrname>
					<#if attr_entries?size == 1>
						<#-- 
							Single value goes into a value element
						-->
						<#local attr_entry = attr_entries [ 0 ] />
						<#local attr_java_val = XsdMapper.javaValueWithDefault ( attr_entry.xsd, attr_entry.lex_value ) />
						<#local attr_java_class = (attr_entry.java_class != '')?then (
							attr_entry.java_class, attr_java_val.getClass().getCanonicalName() 
						)>
						<value java_class="${attr_java_class}">
							<literal>${attr_entry.lex_value}</literal>
						</value>		
					<#else>
						<#-- 
							Multi-values need to be wrapped into an holder, we support set holder only, original holders of
						  other type (list, map) are lost 
						-->
				    <value java_class="net.sourceforge.ondex.export.oxl.SetHolder">
				      <literal>
				        <item>
				        	<#list attr_entries as attr_entry>
				          <set 
				          	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				          	xsi:type="${attr_entry.xsd}">${attr_entry.lex_value}</set>
				          </#list>
				        </item>
				      </literal>
				    </value>
					</#if>
				  <#-- Since they are defined at the attr type level, they're the same for all values -->
					<#if attr_entries [ 0 ].is_indexed>
						<doindex>true</doindex>
					</#if>
				</${entry_xml_tag}>
			</#list><#-- grouped_values -->
		</${group_xml_tag}>
</#macro>
