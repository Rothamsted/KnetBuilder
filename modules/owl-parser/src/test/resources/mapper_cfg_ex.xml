<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<description><![CDATA[
	An example of Spring configuration for the OWL parser that is based on mapping components. 
	]]></description>


	<bean id = "owlMapper" class = "net.sourceforge.ondex.parser.owl.OWLMapper">
		<!-- 
			The root component. Subcomponents are added here and their parameters are set to customise the parser.
			
			For instance, an OWL mapper is configured with concept mappers, which map all descendants of a top OWL class
			(eg, 'go:biological process' to ONDEX concepts. Such top class can be specified via a concept class mapper, 
			which maps the top OWL class to an ONDEX concept class. 
		 -->
	  <property name = "conceptMappers">
	  	<set>
	  		<bean class = "net.sourceforge.ondex.parser.owl.OWLConceptMapper">
	  			<property name="conceptClassMapper">
	  				<bean class = "net.sourceforge.ondex.parser.owl.OWLConceptClassMapper" >
	  					<!-- This is the Spring way to call Java stuff (see SpEl documentation) -->
	  					<property name = "classIri" value="#{ns.iri ( 'foo:TopClass' )}" />
	  				</bean>
	  			</property>
	  		</bean>
	  	</set>
	  </property>
	</bean>
		
		
	<bean id = "ns" class = "info.marcobrandizi.rdfutils.namespaces.NamespaceUtils" />		
</beans>
