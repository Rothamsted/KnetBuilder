<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<description><![CDATA[
	The default mapping for net.sourceforge.ondex.parser.owl.OWLMapper. This uses mappings from common elements in OWL
	files, such as rdfs:label or rdfs:comment.
	
	This file is usually imported by a configuration that is specific to a particular ontology file.
	
	Hae a look at the Spring documentation, eg, https://www.tutorialspoint.com/spring/spring_bean_definition.htm
	to know how this file works. Also, see the OWL parser code to figure out which Java components are available for 
	mapping your ontology to ONDEX.
	]]></description>


	<!--
		Defaults that are referred by other components. 
	 -->
	 
	<bean id = "evidenceTypePrototype" class = "net.sourceforge.ondex.core.utils.EvidenceTypePrototype">
		<property name="id" value = "IMPD" />
		<property name="fullname" value = "IMPD" />
	</bean>	 
	 
	<bean id = "idMapper" class = "net.sourceforge.ondex.parser.owl.IRIBasedIdMapper" /> 

	<!-- Default label based on rdfs:label -->
	<bean id = "labelMapper" class = "net.sourceforge.ondex.parser.owl.TextPropertyMapper">
		<property name="propertyIri" value="#{ns.iri ( 'rdfs:label' )}"></property>
	</bean>		

	<!-- Default description/definition based on rdfs:comment -->
	<bean id = "descriptionMapper" class = "net.sourceforge.ondex.parser.owl.TextPropertyMapper">
		<property name="propertyIri" value="#{ns.iri ( 'rdfs:comment' )}"></property>
	</bean>		

	<bean id = "conceptMapper" class = "net.sourceforge.ondex.parser.owl.OWLConceptMapper">
		<property name = "idMapper" ref = "idMapper" />
		<property name = "preferredNameMapper" ref = "labelMapper" />
		<property name = "descriptionMapper" ref = "descriptionMapper" />
	</bean>
	
	<bean id = "conceptClassMapper" class = "net.sourceforge.ondex.parser.owl.OWLClassCCMapper">
		<property name = "idMapper" ref = "idMapper" />
		<property name = "labelMapper" ref = "labelMapper" />
		<property name = "descriptionMapper" ref = "descriptionMapper" />
	</bean>
	
	<!-- This is an example of alternative to conceptClassMapper -->
	<bean id = "constCCMapper" class = "net.sourceforge.ondex.parser.owl.OWLConstCCMapper">
		<property name="value">
			<bean class = "net.sourceforge.ondex.core.utils.ConceptClassPrototype">
				<property name = "id" value="EXID" />
				<property name = "fullName" value="Example Concept Class" />
				<property name= "description" value="This is just an example." />
			</bean>
		</property>
	</bean>
	
	<!-- This is based on the root classes in the OWL structure -->
	<bean id = "subClassMapper" class = "net.sourceforge.ondex.parser.owl.OwlSubClassRelMapper">
		<property name="conceptClassMapper" ref = "conceptClassMapper" />
		<property name="conceptMapper" ref = "conceptMapper" />
		<property name="evidenceTypePrototype" ref = "evidenceTypePrototype" />
		<!-- 
			This means the root OWL classes, whatever the way they're picked by topClassesProvider, are mapped to 
			ONDEX concepts. You might not want this, for example when you consider "Biological Concept" in GO a concept
			class only.
		-->
		<property name="doMapRootsToConcepts" value = "true" />
		<property name="topClassesProvider">
			<bean class = "net.sourceforge.ondex.parser.owl.OwlRootClassesProvider" />
		</property>
	</bean>
		
	<!-- 
	  And this is for the case where you have IRIs about the top classes. 
		You need one per IRI and you too can use the parent 
	-->
	<bean id = "subClassesMapperEx" parent = "subClassMapper">
		<property name="topClassesProvider">
			<bean class = "net.sourceforge.ondex.parser.owl.IriBasedTopClassesProvider">
				<property name="topClassIri" value = "#{ns.iri ( 'obo:GO_0008150' )}" /> <!-- BioProcess -->
			</bean>
		</property>
		<!-- See above, in a case like this you might want this to be false. -->
  	<property name="doMapRootsToConcepts" value = "false" />
	</bean> 		
		
	<!-- This is called via SpEl -->
	<bean id = "ns" class = "info.marcobrandizi.rdfutils.namespaces.NamespaceUtils" />
	
	<!-- 
		This is the default OntModel that we use to load the input OWL. As you can see, we disable any type of 
	  inference, the default model, which as some basic entailments enabled, causes endless waitings and eventual
	  crashes 
	-->
	<bean id = "jenaOntModel" class = "org.apache.jena.rdf.model.ModelFactory" 
		scope = "prototype"
		factory-method="createOntologyModel">
		<constructor-arg value="#{T( org.apache.jena.ontology.OntModelSpec ).OWL_MEM }"></constructor-arg>
	</bean>
		
</beans>
